"""This module contains most of the functions and variables needed to operate the game."""
# Required packages, mysql-connector-python, geopy, PySimpleGUI

import random
import math
import time
import SQLfunctions  # IS REQUIRED, some functions have trouble finding global variables due to multilevel scopes.
import mysql.connector
import geopy.distance
import PySimpleGUI
import datetime  # IS REQUIRED, used in handling datetime formats returned from SQL queries.

# Vars
turncounter = 0
lng_state = 1
playercount = 0
currentplayer = 1
startmenuoption = 8
numofgoals = 4
tracknum = 1    # For keeping track of goal ID's
activegoal = 1      # For keepint track of the latest player goal. Input from latestgoallookup()
lastgoal = 1
goalturntracker = 0  # Default = 0

# Lists
endscores = []
hintsround0 = ["", "", "", ""]    # For remembering hints generated by hintcreation func.
hintsround1 = ["", "", "", ""]    # etc etc...
hintsround2 = ["", "", "", ""]
hintsround3 = ["", "", "", ""]
hintsall = [hintsround0, hintsround1, hintsround2, hintsround3]

# Login stuff
sqlconnect = mysql.connector.connect(
    host="localhost",
    port="3306",
    database="flight_game",
    user="pyth",
    password="1337",
    autocommit=True
)


# Terminal output modifiers.
class BColors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

    CEND = '\33[0m'
    CBOLD = '\33[1m'
    CITALIC = '\33[3m'
    CURL = '\33[4m'
    CBLINK = '\33[5m'
    CBLINK2 = '\33[6m'
    CSELECTED = '\33[7m'

    CBLACK = '\33[30m'
    CRED = '\33[31m'
    CGREEN = '\33[32m'
    CYELLOW = '\33[33m'
    CBLUE = '\33[34m'
    CVIOLET = '\33[35m'
    CBEIGE = '\33[36m'
    CWHITE = '\33[37m'

    CBLACKBG = '\33[40m'
    CREDBG = '\33[41m'
    CGREENBG = '\33[42m'
    CYELLOWBG = '\33[43m'
    CBLUEBG = '\33[44m'
    CVIOLETBG = '\33[45m'
    CBEIGEBG = '\33[46m'
    CWHITEBG = '\33[47m'

    CGREY = '\33[90m'
    CRED2 = '\33[91m'
    CGREEN2 = '\33[92m'
    CYELLOW2 = '\33[93m'
    CBLUE2 = '\33[94m'
    CVIOLET2 = '\33[95m'
    CBEIGE2 = '\33[96m'
    CWHITE2 = '\33[97m'

    CGREYBG = '\33[100m'
    CREDBG2 = '\33[101m'
    CGREENBG2 = '\33[102m'
    CYELLOWBG2 = '\33[103m'
    CBLUEBG2 = '\33[104m'
    CVIOLETBG2 = '\33[105m'
    CBEIGEBG2 = '\33[106m'
    CWHITEBG2 = '\33[107m'


# Functions
def aircraft_availability_detect(startloc, endloc):
    availableaircrafttype = [1, 2, 3, 4, 5]
    airporttypes = []
    startlocquery = f'''SELECT type FROM airport
                    WHERE ident = "{startloc}"
                    ;'''
    endlocquery = f'''SELECT type FROM airport
                    WHERE ident = "{endloc}"
                    ;'''
    airporttypes.append(cursor_fetchall(startlocquery))
    airporttypes.append(cursor_fetchall(endlocquery))

    trackingnum = 0
    for j in airporttypes:
        name = str(j)
        delthese = "[()],.'¨"
        for char in delthese:
            name = name.replace(char, "")
        airporttypes[trackingnum] = name
        trackingnum += 1

    for i in airporttypes:
        if i == "balloonport":
            unwanted_num = {4, 3, 1, 5}
            availableaircrafttype = [ele for ele in availableaircrafttype if ele not in unwanted_num]
        elif i == "closed":
            print(f"{BColors.CVIOLET2}The airport you attempted to move to is closed\n{BColors.ENDC}"
                  f"{BColors.CVIOLET2}Please select an open airport.{BColors.ENDC}")
            player_options_menu(lng_state)
            unwanted_num = {4, 3, 2, 1, 5}
            availableaircrafttype = [ele for ele in availableaircrafttype if ele not in unwanted_num]
        elif i == "heliport":
            unwanted_num = {4, 1, 5}
            availableaircrafttype = [ele for ele in availableaircrafttype if ele not in unwanted_num]
        elif i == "large_airport":
            unwanted_num = {4}
            availableaircrafttype = [ele for ele in availableaircrafttype if ele not in unwanted_num]
        elif i == "medium_airport":
            unwanted_num = {4}
            availableaircrafttype = [ele for ele in availableaircrafttype if ele not in unwanted_num]
        elif i == "small_airport":
            unwanted_num = {4, 5}
            availableaircrafttype = [ele for ele in availableaircrafttype if ele not in unwanted_num]
        elif i == "seaplane_base":
            unwanted_num = {1, 5}
            availableaircrafttype = [ele for ele in availableaircrafttype if ele not in unwanted_num]
        if not availableaircrafttype:
            print(f"{BColors.CVIOLET2}There are no aircraft capable of moving between selected airports.\n{BColors.ENDC}"
                    f"{BColors.CVIOLET2}Please choose another location.{BColors.ENDC}")
            player_options_menu(lng_state)
    return availableaircrafttype


def check_icao(icaocode):
    query = f'''SELECT ident FROM airport
                WHERE ident = "{icaocode}"
                ;'''
    result = cursor_fetchall(query)
    for row in result:
        if row[0] == "closed":
            print(f"{BColors.CVIOLET2}Error\n{BColors.ENDC}"
                  f"{BColors.CVIOLET2}The specified airport is currently closed. {BColors.ENDC}")
            return False
    if len(result) == 0:  # True means specified ICAO was found, False means incorrect ICAO.
        return False
    else:
        return True


def clear_data():
    query = f'''DELETE FROM goal_reached;'''
    cursor(query)
    query = f'''DELETE FROM game;'''
    cursor(query)


def confirm_aircrafttype(currentlng, aircrafttuple):
    if currentlng == 1:
        chosenaircraft = None
        while chosenaircraft is None:
            try:
                chosenaircraft = int(input("Choose aircraft: "))
                for row in aircrafttuple:
                    if chosenaircraft == int(row[0]):
                        return int(row[3])  # returns amount of Co2 per KM of chosen aircraft.
                print(f"{BColors.CVIOLET2}Input integer from available options.\n{BColors.ENDC}")
                confirm_aircrafttype(1, aircrafttuple)
            except ValueError:
                print(f"{BColors.CVIOLET2}Input integer!{BColors.ENDC}")


def gamecredits(currentlng):
    if currentlng == 1:
        print("\n")
        print("Made by:\n"
              "Misto #1 \n"
              "Magnus \n"
              "Jasper \n"
              "Daniel \n")


def currentplayer_currentloc(currentplayerid):
    query = f'''SELECT location FROM game
            WHERE id = "{currentplayerid}"
            ;'''
    result = cursor_fetchall(query)

    icao = str(result[0])
    delthese = "[()],.'¨"
    for char in delthese:
        icao = icao.replace(char, "")
    return icao


def print_currentplayer_turn(currentlng):
    if currentlng == 1:
        query = f'''SELECT screen_name
                FROM game
                WHERE id = {currentplayer}'''
        result = cursor_fetchall(query)
        name = str(result[0])
        delthese = "[()],.'¨"
        for char in delthese:
            name = name.replace(char, "")
        print(f"{BColors.OKBLUE}It is now {name}'s turn.{BColors.ENDC}")


def cursor(inp):
    cursor = sqlconnect.cursor()
    cursor.execute(inp)


def cursor_fetchall(inp):
    cursor = sqlconnect.cursor()
    cursor.execute(inp)
    outcome = cursor.fetchall()
    return outcome


def goalcheck(player):
    query = f'''SELECT airport.id
                FROM airport, game
                WHERE game.id = {player}
                AND game.location = airport.ident
                ;'''
    query2 = f'''SELECT airportid, id
                FROM goal
                ;'''
    currentlocid = cursor_fetchall(query)
    goalids = cursor_fetchall(query2)
    for j in currentlocid:
        name = str(j)
        delthese = "[()],.'¨"
        for char in delthese:
            name = name.replace(char, "")
        currentlocid = name
    for row in goalids:
        query3 = f'''INSERT INTO goal_reached(goal_id, game_id)
                    VALUES({row[1]}, {currentplayer})
                    ;'''
        if str(row[0]) == str(currentlocid):
            cursor(query3)
            query4 = f'''UPDATE goal
                        SET goalreached = 1
                        WHERE airportid = {currentlocid}
                        ;'''
            cursor(query4)  # sets goalreached flag into goals table.
            SQLfunctions.goalturntracker = 0


def findicao(currentlng):
    if currentlng == 1:
        print("Select which filters you wish to use.\n"
              '[1] for airportname.\n'
              '[2] for airporttype.\n'
              '[3] for continent.\n'
              '[4] for country ISO code.\n'
              '[5] for Country region iso code\n'
              '[6] for municipality name\n'
              '"Exit" to exit search.')
        filterselect = input("Input chosen filters: ").upper()
        spacing()
        airportname = ""
        airporttype = ""
        airportcontinent = ""
        countryname = ""
        regioniso = ""
        municipality = ""
        if "EXIT" in filterselect:
            return
        if "1" in filterselect:
            airportname = input("Input airportname filter: ")
        if "2" in filterselect:
            airporttype = input("Input airporttype filter: ")
        if "3" in filterselect:
            airportcontinent = input("Input Continent ISO code (EU, OC, AF...): ")
        if "4" in filterselect:
            countryname = input("Input country name: ")
        if "5" in filterselect:
            regioniso = input("Input country region ISO code: ")
        if "6" in filterselect:
            municipality = input("Input municipality name: ")
        #        else:
        #            print("No filters applied, this search will not work.")
        #            answ = input('Input "y" to continue: ').upper()
        #            if answ != "Y":
        #                return
        query = f'''SELECT airport.name, airport.type, airport.continent,
                country.name, airport.ident, airport.iso_country, airport.municipality
                FROM airport, country
                WHERE country.iso_country = airport.iso_country
                AND airport.name LIKE "%{airportname}%"
                AND airport.type LIKE "%{airporttype}%"
                AND airport.continent LIKE "%{airportcontinent}%"
                AND country.name LIKE "%{countryname}%"
                AND airport.iso_country LIKE "%{regioniso}%"
                AND airport.municipality LIKE "%{municipality}%"
                ORDER BY airport.name ASC
                ;'''
        results = cursor_fetchall(query)
        for row in results:
            print(f'"Name": {row[0]}, '
                  f'"Type": {row[1]}, '
                  f'"Continent": {row[2]}, '
                  f'"Country": {row[3]}, '
                  f'"RegionISO": {row[5]}, '
                  f'"Municipality": {row[6]}, '
                  f'"ICAO": {row[4]}.')
        return


def getcoords(icao):
    query = f'''SELECT latitude_deg, longitude_deg 
        FROM airport WHERE ident = "{icao}"'''
    return cursor_fetchall(query)


def nextturn():
    keeptracknum = 0
    nextupcoming = 0
    dtimelist = []
    query = f'''SELECT id, next_turn FROM game
            ;'''
    alldates = cursor_fetchall(query)
    for row in alldates:
        dtime = row[1]
        dtimelist.append(dtime)
        if dtimelist[keeptracknum] <= dtimelist[nextupcoming]:
            nextupcoming = keeptracknum
        keeptracknum += 1
    SQLfunctions.currentplayer = nextupcoming + 1


def lang_select(currentlng):
    global lng_state
    status = False
    if currentlng == 1:
        print("[1] for English.\n"
              "[2] for Russian?!?\n")
        while not status:
            try:
                lng_state = int(input("#: "))
                spacing()
                if 1 <= lng_state <= 4:
                    status = True
                else:
                    print(f"{BColors.CVIOLET2}Enter one of available options.{BColors.ENDC}")
                    spacing()
            except ValueError:
                print(f"{BColors.CVIOLET2}Input only integer numbers.{BColors.ENDC}")
                spacing()


def language(currentlng):
    if currentlng == 1:
        print("Suomi")
        print("English")
        print("Ruski")
        print("Eesti keel")


def list_available_aircraft(currentlng, distancekm, aircrafttypenum):
    trackingnum = 0
    if currentlng == 1:
        if len(aircrafttypenum) == 1:
            aircrafttypes = str(aircrafttypenum[0])
        else:
            aircrafttypes = str(aircrafttypenum[0])
            for i in aircrafttypenum:
                aircrafttypes = f"{aircrafttypes} or type_numeric = {aircrafttypenum[trackingnum]}"
                trackingnum += 1

        matching_aircraftquer = f'''SELECT ROW_NUMBER() OVER() AS num_row, id, model_name, co2_per_km, speed_kmh
                                FROM lentoalukset
                                WHERE type_numeric = {aircrafttypes}
                                AND max_range_km > {distancekm}
                                ;'''
        aircraft = SQLfunctions.cursor_fetchall(matching_aircraftquer)
        if not aircraft:
            print("There are no aircraft capable of making this journey, we suggest traveling to a closer airport.")
            player_options_menu(lng_state)
        print(f"{BColors.BOLD}Here are the compatible aircraft.{BColors.ENDC}")
        for row in aircraft:
            print(f"[{row[0]}]{row[2]}, co2 produced per KM: {row[3]}, Speed KM/h: {row[4]}.")
        return confirm_aircrafttype(currentlng, aircraft)


def menu(currentlng):
    if currentlng == 1:
        print("\n")
        print("[1]New game")
        print("[2]Options")
        print("[3]Credits")
        print("[4]Scoreboard")
        print("[0]Quit")


def movement_calc_co2(distance, co2perkm):
    return distance * co2perkm


def movement_calc_km(endloc):
    query = f'''SELECT game.location FROM game
                WHERE game.id = "{currentplayer}"
                ;'''
    distancekm = geopy.distance.geodesic(getcoords(cursor_fetchall(query)), getcoords(endloc))
    templist = [distancekm]
    kmm = str(templist[0])
    kmm = kmm[:8]
    kmm = float(kmm)
    kmm = int(kmm)
    return kmm


def movement_calc_time(endloc):
    query = f'''SELECT game.location FROM game
            WHERE game.id = "{currentplayer}"
            ;'''
    distancekm = geopy.distance.geodesic(getcoords(cursor_fetchall(query)), getcoords(endloc))
    templist = [distancekm]
    kmm = str(templist[0])
    kmm = kmm[:8]
    kmm = float(kmm)
    timespent = int((kmm // 500) * 60)
    return timespent


def moveplayer(endloc, playerid):
    query = f'''UPDATE game
            SET location = "{endloc}"
            WHERE id = {playerid}
            ;'''
    if check_icao(endloc):
        cursor(query)
        updatenextturn(playerid, movement_calc_time(endloc))
    else:
        print(f"{BColors.CVIOLET2}Error 'check_ICAO' not passed in 'moveplayer'{BColors.ENDC}")


def new_game(currentlng):
    global playercount
    clear_data()
    if currentlng == 1:
        print('[1]. Singleplayer\n'
              '[2]. Multiplayer')
        while True:
            try:
                userchoice = int(input("#: "))
                if userchoice == 1:
                    playercount = 1
                    spacing()
                    break
                elif userchoice == 2:
                    try:
                        playercount = int(input("Input number of players: "))
                        spacing()
                        break
                    except ValueError:
                        print(f"{BColors.CVIOLET2}Please only input numbers.{BColors.ENDC}")
                        spacing()
            except ValueError:
                print(f"{BColors.CVIOLET2}Enter only from specified integer numbers.{BColors.ENDC}")
                spacing()
        player_setup(lng_state, playercount)


def options(currentlng):
    if currentlng == 1:
        print("\n")
        print("[1]Language")


def player_setup(currentlng, players):
    i = 1
    if currentlng == 1:
        while i <= players:
            playername = input(f"Enter {i} players name: ")
            startinglocation = input("Enter chosen starting location\n"
                                     + "or leave empty for default.\n"
                                     + "#: ").upper()
            if startinglocation == "":
                startinglocation = "EGCC"
                spacing()
            status = check_icao(startinglocation)
            if status:  # Replace with "if status == True:" if this line causes problems.
                query = f'''INSERT INTO game(id, co2_consumed, co2_budget, screen_name, location)
                        VALUES({i}, 0, 10000, "{playername}", "{startinglocation}")
                        ;'''
                cursor(query)
                i += 1
            elif not status:
                print(f"{BColors.CVIOLET2}Error! ICAO not found in database list.{BColors.ENDC}")
                spacing()


def player_options_menu(currentlng):
    if currentlng == 1:
        while True:
            print("Choose what you wish to do.\n"
                  '[1] Lookup ICAO code.\n'
                  '[2] Move to new airport.\n'
                  '[3] Look at current player information.\n'
                  '[4] List hints.')
            playerchoice = input("#: ")
            spacing()
            if playerchoice == "1":
                findicao(lng_state)
            if playerchoice == "2":
                relocate(lng_state)
                return
            if playerchoice == "3":
                plyr_quer()
            if playerchoice == "4":
                printallhints()


def plyr_quer():
    query = f'''SELECT game.screen_name, game.location, game.co2_consumed
                FROM game
                GROUP BY game.id ASC
                ;'''
    templist = cursor_fetchall(query)
    for row in templist:
        print(f"Username: {row[0]}, "
              f"current location: {row[1]}, "
              f"co2 consumed: {row[2]}, ")
    spacing()


def random_goal_gen():
    cursor("DELETE FROM goal;")
    for i in range(numofgoals):
        airportid = random.randint(1, 70942)
        query = f'''SELECT id FROM airport
                        WHERE id = {airportid}
                        ;'''
        result = cursor_fetchall(query)
        for row in result:
            if row[0] == "closed":
                # print("Closed airport in random_goal_gen func.")
                random_goal_gen()
        query2 = f'''INSERT INTO goal (id, airportid)
                    VALUES({SQLfunctions.tracknum}, {airportid})
                    ;'''
        cursor(query2)
        SQLfunctions.tracknum += 1


def relocate(currentlng):
    if currentlng == 1:
        print("Which terminal do you wish to travel to?\n"
              '"Input" its ICAO code.')
        while True:
            newlocation = input("#: ").upper()
            if check_icao(newlocation):
                co2perkm = list_available_aircraft(currentlng, movement_calc_km(newlocation),
                                                   aircraft_availability_detect(
                                                       currentplayer_currentloc(currentlng),
                                                       newlocation))
                distance = movement_calc_km(newlocation)
                #print(f"distance = {distance}")
                updateco2(currentplayer, movement_calc_co2(distance, co2perkm))
                #print(f"updateco2 = {updateco2(currentplayer, movement_calc_co2(distance, co2perkm))}")
                moveplayer(newlocation, currentplayer)
                print("You are moving to your destination.")
                spacing()
                return
            else:
                print(f"{BColors.CVIOLET2}ICAO not found in terminal database. Please try again.{BColors.ENDC}")
                spacing()


def spacing():
    print("\n")


def startmenu(currentlng):
    if currentlng == 1:
        startmenuoption = 8
        while startmenuoption != 0:
            menu(currentlng)
            startmenuoption = int(input("Enter choice: "))
            if startmenuoption == 1:
                spacing()
                new_game(currentlng)
                return
            elif startmenuoption == 2:
                options(currentlng)
                nappi = "bruh"
                nappi = input("Press enter to go back")
                if nappi == "":
                    startmenuoption = 9
                    continue
            elif startmenuoption == 3:
                gamecredits(currentlng)
                nappi = "bruh"
                nappi = input("Press enter to go back")
                if nappi == "":
                    startmenuoption = 9
                    continue
            elif startmenuoption == 4:
                scoreboarddisplay()
                nappi = "bruh"
                nappi = input("Press enter to go back")
                if nappi == "":
                    startmenuoption = 9
                    continue
            elif startmenuoption == 0:
                break
            elif startmenuoption != 1 or startmenuoption != 2 or startmenuoption != 3:
                print("\n")
                print("\n")
                print(f"{BColors.CVIOLET2}INVALID INPUT{BColors.ENDC}")
                time.sleep(1)
                continue


def tmp_data():  # Only for troubleshooting.
    query = f'''INSERT INTO game(id, co2_consumed, co2_budget, screen_name, location)
            VALUES(1, 2000, 10000, "Heini", "EFHK"),
            (2, 3000, 10000, "Vesa", "EGCC"),
            (3, 8000, 10000, "Ilkka", "EGKK")
            ;'''
    cursor(query)
    query = f'''INSERT INTO goal_reached(game_id, goal_id)
            VALUES(1, 4),
            (1, 7),
            (2, 4),
            (3, 7)
            ;'''
    cursor(query)


def updateco2(playerid, co2toadd):
    query = f'''UPDATE game
            SET co2_consumed = co2_consumed + {co2toadd}
            WHERE id = "{playerid}"
            ;'''
    cursor(query)


def updatenextturn(playerid, timetoadd):
    query = f'''UPDATE game
            SET next_turn = next_turn + INTERVAL {timetoadd} MINUTE
            WHERE id = "{playerid}"
            ;'''
    cursor(query)
    return


def endgoalachieved():
    query = f'''SELECT COUNT(goal_reached.goal_id)
            FROM goal_reached, game
            WHERE game.id = goal_reached.game_id
            AND game.id = "1"
            GROUP BY game.id ASC
            ;'''
    status = cursor_fetchall(query)
    for row in status:
        if row[0] == 8:
            print("game over TODO wins!")
            return True


def exticaowindow(search):
    query = f'''SELECT airport.name, airport.ident FROM airport
                WHERE airport.name LIKE "%{search}%"
                ORDER BY airport.name ASC
                ;'''
    results = cursor_fetchall(query)
    # Layout
    layout = [[PySimpleGUI.Text(results)],
              [PySimpleGUI.Button("Close")]]
    # Create the window
    window = PySimpleGUI.Window("ICAO lookup", layout)
    # Create an event loop
    while True:
        event, values = window.read()
        # End program if user closes window or
        # presses the OK button
        if event == "Close" or event == PySimpleGUI.WIN_CLOSED:
            break
    window.close()


def latestgoallookup():
    print(f"{BColors.WARNING} latestgoallookup FUNC START{BColors.ENDC}")
    query = f'''SELECT goal.id
                FROM goal
                WHERE NOT goal.goalreached = 1
                ORDER BY goal.id ASC
                FETCH FIRST 1 ROWS ONLY
                ;'''
    currentgoalid = cursor_fetchall(query)
    for j in currentgoalid:
        editedstr = str(j)
        delthese = "[()],.'¨"
        for char in delthese:
            editedstr = editedstr.replace(char, "")
        currentgoalid = int(editedstr)
    SQLfunctions.activegoal = int(currentgoalid)


def hintcreation():
    if goalturntracker == 0:
        query = f'''SELECT airport.continent, airport.type
                    FROM airport, goal
                    WHERE goal.id = {SQLfunctions.activegoal}
                    AND airport.id = goal.airportid
                    ;'''
        result = cursor_fetchall(query)
        for row in result:
            hint = f'''The airport is of the type "{row[1]}", and is located on the "{row[0]}" continent.'''
            if hintsall[currentgoalid()][0] == "":
                hintsall[currentgoalid()][0] = hint
                print(hint)
            else:
                print(hintsall[currentgoalid()][0])
    elif goalturntracker == 1:
        query = f'''SELECT airport.iso_country, country.name
                    FROM airport, goal, country
                    WHERE goal.id = {SQLfunctions.activegoal}
                    AND airport.iso_country = country.iso_country
                    AND airport.id = goal.airportid
                    ;'''
        result = cursor_fetchall(query)
        for row in result:
            hint = f'''The airport is located in the country of [{row[0]}]: {row[1]}.'''
            if hintsall[currentgoalid()][1] == "":
                hintsall[currentgoalid()][1] = hint
                print(hint)
            else:
                print(hintsall[currentgoalid()][1])
    elif goalturntracker == 2:
        query = f'''SELECT airport.iso_region, airport.iso_country, country.name
                    FROM airport, goal, country
                    WHERE goal.id = {SQLfunctions.activegoal}
                    AND airport.iso_country = country.iso_country
                    AND airport.id = goal.airportid
                    ;'''
        result = cursor_fetchall(query)
        for row in result:
            hint = f'''The airport is located region of [{row[0]}] within the country of [{row[1]}]: {row[2]}.'''
            if hintsall[currentgoalid()][2] == "":
                hintsall[currentgoalid()][2] = hint
                print(hint)
            else:
                print(hintsall[currentgoalid()][2])
    elif goalturntracker == 3:
        query = f'''SELECT airport.municipality, airport.iso_country, country.name
                    FROM airport, goal, country
                    WHERE goal.id = {SQLfunctions.activegoal}
                    AND airport.iso_country = country.iso_country
                    AND airport.id = goal.airportid
                    ;'''
        result = cursor_fetchall(query)
        for row in result:
            hint = f'''The airport is located within the municipality of [{row[0]}], within the country of [{row[1]}]: {row[2]}.'''
            if hintsall[currentgoalid()][3] == "":
                hintsall[currentgoalid()][3] = hint
                print(hint)
            else:
                print(hintsall[currentgoalid()][3])
    #else:
        #print(f"{BColors.CVIOLET2}ERROR\n goalturntracker var out of bounds in hintcreation func{BColors.ENDC}")


def nextgoalturn():
    if SQLfunctions.goalturntracker > 3:
        return
    else:
        SQLfunctions.goalturntracker += 1


def currentgoalid():
    query = f'''SELECT goal_reached.goal_id
                FROM goal_reached
                WHERE goal_reached.game_id = {currentplayer}
                ORDER BY goal_reached.goal_id DESC
                FETCH FIRST 1 ROWS ONLY
                ;'''
    result = cursor_fetchall(query)
    if not result:
        return 0
    else:
        for j in result:
            string = str(j)
            delthese = "[()],.'¨"
            for char in delthese:
                string = string.replace(char, "")
            return int(string) - 1


def printallhints():
    for row in hintsall[currentgoalid()]:
        if row != "":
            print(row)


def gameover():
    query = f'''SELECT goalreached
                FROM goal
                WHERE goalreached = 1
                ;'''
    result = cursor_fetchall(query)
    if len(result) == 4:
        print("GAME OVER!")
        return True
    else:
        return False


def scorecalc():
    trackingnum = 1
    for i in range(1):
        query = f'''SELECT game.co2_consumed, game.starttime, game.next_turn
                    FROM game
                    WHERE id = {trackingnum}
                    ;'''
        result = cursor_fetchall(query)
        for row in result:
            print(row[0])
            print(row[1])
            print(row[2])
            times = row[2] - row[1]
            times = int(times.total_seconds())
            co2 = int(row[0])
            endscore = (math.sqrt((co2 - (420 * (times ** 2))/69) ** 2)) / 42069
            endscore = round(endscore)
            endscore = int(endscore)
            endscores.append(endscore)
    trackingnum += 1


def scoredisplay():
    trackingnum = 1
    query = f'''SELECT screen_name
                FROM game
                WHERE id = {trackingnum}
                ;'''
    for i in range(1):
        result = cursor_fetchall(query)
        for row in result:
            print(f"{row[0]} earned {endscores[i]} points.")
    trackingnum += 1


def savescores():
    trackingnum = 1
    query = f'''SELECT screen_name
                    FROM game
                    WHERE id = {trackingnum}
                    ;'''
    for i in range(1):
        result = cursor_fetchall(query)
        for row in result:
            query2 = f'''INSERT INTO leaderboard(name, score)
                        VALUE("{row[0]}", {endscores[i]})'''
            cursor(query2)
    trackingnum += 1


def scoreboarddisplay():
    query = f'''SELECT name, score
                FROM leaderboard
                ORDER BY score DESC
                FETCH FIRST 10 ROWS ONLY
                ;'''
    results = cursor_fetchall(query)
    for row in results:
        print(f"Playername: [{row[0]}]          Score: [{row[1]}]")


def backup():
    cursor = sqlconnect.cursor
    table_names = []
    db = "flight_game"
    cursor.execute("SHOW TABLES;")

    for record in cursor.fetchall():
        table_names.append(record[0])

    #savename = input("Enter save name: ")
    backup_dbname = db + f"_backuo"   #{savename}"
    try:
        cursor.execute(f"CREATE DATABASE {backup_dbname}")
    except:
        pass

    cursor.execute(f"USE {backup_dbname}")
    for table_name in table_names:
        cursor.execute(
        f"CREATE TABLE {table_name} SELECT * FROM {db}.{table_name}")